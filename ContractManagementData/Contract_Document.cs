//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ContractManagementData
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Contract))]
    [KnownType(typeof(DocumentType))]
    public partial class Contract_Document
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Contract_Number
        {
            get { return _contract_Number; }
            set
            {
                if (_contract_Number != value)
                {
                    if (Contract != null && Contract.ContractNumber != value)
                    {
                        Contract = null;
                    }
                    _contract_Number = value;
                }
            }
        }
        private string _contract_Number;
        [DataMember]
        public virtual Nullable<int> Agreement_id
        {
            get;
            set;
        }
        [DataMember]
        public virtual int DocumentType_id
        {
            get { return _documentType_id; }
            set
            {
                if (_documentType_id != value)
                {
                    if (DocumentType != null && DocumentType.ID != value)
                    {
                        DocumentType = null;
                    }
                    _documentType_id = value;
                }
            }
        }
        private int _documentType_id;
        [DataMember]
        public virtual byte[] DocumentFileBinary
        {
            get;
            set;
        }
        [DataMember]
        public virtual string DocumentKeyword
        {
            get;
            set;
        }
        [DataMember]
        public virtual string DocumentFilePath
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Contract Contract
        {
            get { return _contract; }
            set
            {
                if (!ReferenceEquals(_contract, value))
                {
                    var previousValue = _contract;
                    _contract = value;
                    FixupContract(previousValue);
                }
            }
        }
        private Contract _contract;
        
    
        [DataMember]
        public virtual DocumentType DocumentType
        {
            get { return _documentType; }
            set
            {
                if (!ReferenceEquals(_documentType, value))
                {
                    var previousValue = _documentType;
                    _documentType = value;
                    FixupDocumentType(previousValue);
                }
            }
        }
        private DocumentType _documentType;

        #endregion

        #region Association Fixup
    
        private void FixupContract(Contract previousValue)
        {
            if (previousValue != null && previousValue.Contract_Document.Contains(this))
            {
                previousValue.Contract_Document.Remove(this);
            }
    
            if (Contract != null)
            {
                if (!Contract.Contract_Document.Contains(this))
                {
                    Contract.Contract_Document.Add(this);
                }
                if (Contract_Number != Contract.ContractNumber)
                {
                    Contract_Number = Contract.ContractNumber;
                }
            }
        }
    
        private void FixupDocumentType(DocumentType previousValue)
        {
            if (previousValue != null && previousValue.Contract_Document.Contains(this))
            {
                previousValue.Contract_Document.Remove(this);
            }
    
            if (DocumentType != null)
            {
                if (!DocumentType.Contract_Document.Contains(this))
                {
                    DocumentType.Contract_Document.Add(this);
                }
                if (DocumentType_id != DocumentType.ID)
                {
                    DocumentType_id = DocumentType.ID;
                }
            }
        }

        #endregion

    }
}

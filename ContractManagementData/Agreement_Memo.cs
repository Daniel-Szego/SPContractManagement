//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ContractManagementData
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Agreement))]
    [KnownType(typeof(InternalPerson))]
    [KnownType(typeof(MemoType))]
    public partial class Agreement_Memo
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual int Agreement_id
        {
            get { return _agreement_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_agreement_id != value)
                    {
                        if (Agreement != null && Agreement.ID != value)
                        {
                            Agreement = null;
                        }
                        _agreement_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _agreement_id;
        [DataMember]
        public virtual System.DateTime MemoTimestamp
        {
            get;
            set;
        }
        [DataMember]
        public virtual string MemoText
        {
            get;
            set;
        }
        [DataMember]
        public virtual int MemoType_id
        {
            get { return _memoType_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memoType_id != value)
                    {
                        if (MemoType != null && MemoType.ID != value)
                        {
                            MemoType = null;
                        }
                        _memoType_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _memoType_id;
        [DataMember]
        public virtual Nullable<int> InternalPerson_id
        {
            get { return _internalPerson_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_internalPerson_id != value)
                    {
                        if (InternalPerson != null && InternalPerson.ID != value)
                        {
                            InternalPerson = null;
                        }
                        _internalPerson_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _internalPerson_id;

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Agreement Agreement
        {
            get { return _agreement; }
            set
            {
                if (!ReferenceEquals(_agreement, value))
                {
                    var previousValue = _agreement;
                    _agreement = value;
                    FixupAgreement(previousValue);
                }
            }
        }
        private Agreement _agreement;
        
    
        [DataMember]
        public virtual InternalPerson InternalPerson
        {
            get { return _internalPerson; }
            set
            {
                if (!ReferenceEquals(_internalPerson, value))
                {
                    var previousValue = _internalPerson;
                    _internalPerson = value;
                    FixupInternalPerson(previousValue);
                }
            }
        }
        private InternalPerson _internalPerson;
        
    
        [DataMember]
        public virtual MemoType MemoType
        {
            get { return _memoType; }
            set
            {
                if (!ReferenceEquals(_memoType, value))
                {
                    var previousValue = _memoType;
                    _memoType = value;
                    FixupMemoType(previousValue);
                }
            }
        }
        private MemoType _memoType;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAgreement(Agreement previousValue)
        {
            if (previousValue != null && previousValue.Agreement_Memo.Contains(this))
            {
                previousValue.Agreement_Memo.Remove(this);
            }
    
            if (Agreement != null)
            {
                if (!Agreement.Agreement_Memo.Contains(this))
                {
                    Agreement.Agreement_Memo.Add(this);
                }
                if (Agreement_id != Agreement.ID)
                {
                    Agreement_id = Agreement.ID;
                }
            }
        }
    
        private void FixupInternalPerson(InternalPerson previousValue)
        {
            if (previousValue != null && previousValue.Agreement_Memo.Contains(this))
            {
                previousValue.Agreement_Memo.Remove(this);
            }
    
            if (InternalPerson != null)
            {
                if (!InternalPerson.Agreement_Memo.Contains(this))
                {
                    InternalPerson.Agreement_Memo.Add(this);
                }
                if (InternalPerson_id != InternalPerson.ID)
                {
                    InternalPerson_id = InternalPerson.ID;
                }
            }
            else if (!_settingFK)
            {
                InternalPerson_id = null;
            }
        }
    
        private void FixupMemoType(MemoType previousValue)
        {
            if (previousValue != null && previousValue.Agreement_Memo.Contains(this))
            {
                previousValue.Agreement_Memo.Remove(this);
            }
    
            if (MemoType != null)
            {
                if (!MemoType.Agreement_Memo.Contains(this))
                {
                    MemoType.Agreement_Memo.Add(this);
                }
                if (MemoType_id != MemoType.ID)
                {
                    MemoType_id = MemoType.ID;
                }
            }
        }

        #endregion

    }
}

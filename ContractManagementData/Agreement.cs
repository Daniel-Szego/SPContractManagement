//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ContractManagementData
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Contract))]
    [KnownType(typeof(Agreement_AccountUnit))]
    [KnownType(typeof(AgreementStatus))]
    [KnownType(typeof(Agreement_CostActual))]
    [KnownType(typeof(Agreement_Memo))]
    [KnownType(typeof(Organisation))]
    [KnownType(typeof(Agreement_ResponsibleExternal))]
    [KnownType(typeof(Agreement_ResponsibleInternal))]
    [KnownType(typeof(RevenueDimension))]
    [KnownType(typeof(RevenueTrend))]
    [KnownType(typeof(Agreement_SalesActual))]
    [KnownType(typeof(Agreement_SalesPlan))]
    [KnownType(typeof(Sector))]
    [KnownType(typeof(Agreement_Todo))]
    [KnownType(typeof(TowerDelivery))]
    [KnownType(typeof(TowerService))]
    public partial class Agreement
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string AgreementNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string ContractNumber
        {
            get { return _contractNumber; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_contractNumber != value)
                    {
                        if (Contract != null && Contract.ContractNumber != value)
                        {
                            Contract = null;
                        }
                        _contractNumber = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _contractNumber;
        [DataMember]
        public virtual string SAPContractNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Country
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Debitor
        {
            get;
            set;
        }
        [DataMember]
        public virtual string OrderNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> Organisation_id
        {
            get { return _organisation_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_organisation_id != value)
                    {
                        if (Organisation != null && Organisation.ID != value)
                        {
                            Organisation = null;
                        }
                        _organisation_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _organisation_id;
        [DataMember]
        public virtual Nullable<int> Sector_id
        {
            get { return _sector_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sector_id != value)
                    {
                        if (Sector != null && Sector.ID != value)
                        {
                            Sector = null;
                        }
                        _sector_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _sector_id;
        [DataMember]
        public virtual Nullable<int> TowerService_id
        {
            get { return _towerService_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_towerService_id != value)
                    {
                        if (TowerService != null && TowerService.ID != value)
                        {
                            TowerService = null;
                        }
                        _towerService_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _towerService_id;
        [DataMember]
        public virtual Nullable<int> TowerDelivery_id
        {
            get { return _towerDelivery_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_towerDelivery_id != value)
                    {
                        if (TowerDelivery != null && TowerDelivery.ID != value)
                        {
                            TowerDelivery = null;
                        }
                        _towerDelivery_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _towerDelivery_id;
        [DataMember]
        public virtual Nullable<int> AgreementStatus_id
        {
            get { return _agreementStatus_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_agreementStatus_id != value)
                    {
                        if (AgreementStatus != null && AgreementStatus.ID != value)
                        {
                            AgreementStatus = null;
                        }
                        _agreementStatus_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _agreementStatus_id;
        [DataMember]
        public virtual Nullable<decimal> AmountPlanPerMonth
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> RevenueTrend_id
        {
            get { return _revenueTrend_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_revenueTrend_id != value)
                    {
                        if (RevenueTrend != null && RevenueTrend.ID != value)
                        {
                            RevenueTrend = null;
                        }
                        _revenueTrend_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _revenueTrend_id;
        [DataMember]
        public virtual Nullable<int> RevenueDimension_id
        {
            get { return _revenueDimension_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_revenueDimension_id != value)
                    {
                        if (RevenueDimension != null && RevenueDimension.ID != value)
                        {
                            RevenueDimension = null;
                        }
                        _revenueDimension_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _revenueDimension_id;

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual Contract Contract
        {
            get { return _contract; }
            set
            {
                if (!ReferenceEquals(_contract, value))
                {
                    var previousValue = _contract;
                    _contract = value;
                    FixupContract(previousValue);
                }
            }
        }
        private Contract _contract;
        
    
        [DataMember]
        public virtual ICollection<Agreement_AccountUnit> Agreement_AccountUnit
        {
            get
            {
                if (_agreement_AccountUnit == null)
                {
                    var newCollection = new FixupCollection<Agreement_AccountUnit>();
                    newCollection.CollectionChanged += FixupAgreement_AccountUnit;
                    _agreement_AccountUnit = newCollection;
                }
                return _agreement_AccountUnit;
            }
            set
            {
                if (!ReferenceEquals(_agreement_AccountUnit, value))
                {
                    var previousValue = _agreement_AccountUnit as FixupCollection<Agreement_AccountUnit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_AccountUnit;
                    }
                    _agreement_AccountUnit = value;
                    var newValue = value as FixupCollection<Agreement_AccountUnit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_AccountUnit;
                    }
                }
            }
        }
        private ICollection<Agreement_AccountUnit> _agreement_AccountUnit;
        
    
        [DataMember]
        public virtual AgreementStatus AgreementStatus
        {
            get { return _agreementStatus; }
            set
            {
                if (!ReferenceEquals(_agreementStatus, value))
                {
                    var previousValue = _agreementStatus;
                    _agreementStatus = value;
                    FixupAgreementStatus(previousValue);
                }
            }
        }
        private AgreementStatus _agreementStatus;
        
    
        [DataMember]
        public virtual ICollection<Agreement_CostActual> Agreement_CostActual
        {
            get
            {
                if (_agreement_CostActual == null)
                {
                    var newCollection = new FixupCollection<Agreement_CostActual>();
                    newCollection.CollectionChanged += FixupAgreement_CostActual;
                    _agreement_CostActual = newCollection;
                }
                return _agreement_CostActual;
            }
            set
            {
                if (!ReferenceEquals(_agreement_CostActual, value))
                {
                    var previousValue = _agreement_CostActual as FixupCollection<Agreement_CostActual>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_CostActual;
                    }
                    _agreement_CostActual = value;
                    var newValue = value as FixupCollection<Agreement_CostActual>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_CostActual;
                    }
                }
            }
        }
        private ICollection<Agreement_CostActual> _agreement_CostActual;
        
    
        [DataMember]
        public virtual ICollection<Agreement_Memo> Agreement_Memo
        {
            get
            {
                if (_agreement_Memo == null)
                {
                    var newCollection = new FixupCollection<Agreement_Memo>();
                    newCollection.CollectionChanged += FixupAgreement_Memo;
                    _agreement_Memo = newCollection;
                }
                return _agreement_Memo;
            }
            set
            {
                if (!ReferenceEquals(_agreement_Memo, value))
                {
                    var previousValue = _agreement_Memo as FixupCollection<Agreement_Memo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_Memo;
                    }
                    _agreement_Memo = value;
                    var newValue = value as FixupCollection<Agreement_Memo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_Memo;
                    }
                }
            }
        }
        private ICollection<Agreement_Memo> _agreement_Memo;
        
    
        [DataMember]
        public virtual Organisation Organisation
        {
            get { return _organisation; }
            set
            {
                if (!ReferenceEquals(_organisation, value))
                {
                    var previousValue = _organisation;
                    _organisation = value;
                    FixupOrganisation(previousValue);
                }
            }
        }
        private Organisation _organisation;
        
    
        [DataMember]
        public virtual ICollection<Agreement_ResponsibleExternal> Agreement_ResponsibleExternal
        {
            get
            {
                if (_agreement_ResponsibleExternal == null)
                {
                    var newCollection = new FixupCollection<Agreement_ResponsibleExternal>();
                    newCollection.CollectionChanged += FixupAgreement_ResponsibleExternal;
                    _agreement_ResponsibleExternal = newCollection;
                }
                return _agreement_ResponsibleExternal;
            }
            set
            {
                if (!ReferenceEquals(_agreement_ResponsibleExternal, value))
                {
                    var previousValue = _agreement_ResponsibleExternal as FixupCollection<Agreement_ResponsibleExternal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_ResponsibleExternal;
                    }
                    _agreement_ResponsibleExternal = value;
                    var newValue = value as FixupCollection<Agreement_ResponsibleExternal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_ResponsibleExternal;
                    }
                }
            }
        }
        private ICollection<Agreement_ResponsibleExternal> _agreement_ResponsibleExternal;
        
    
        [DataMember]
        public virtual ICollection<Agreement_ResponsibleInternal> Agreement_ResponsibleInternal
        {
            get
            {
                if (_agreement_ResponsibleInternal == null)
                {
                    var newCollection = new FixupCollection<Agreement_ResponsibleInternal>();
                    newCollection.CollectionChanged += FixupAgreement_ResponsibleInternal;
                    _agreement_ResponsibleInternal = newCollection;
                }
                return _agreement_ResponsibleInternal;
            }
            set
            {
                if (!ReferenceEquals(_agreement_ResponsibleInternal, value))
                {
                    var previousValue = _agreement_ResponsibleInternal as FixupCollection<Agreement_ResponsibleInternal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_ResponsibleInternal;
                    }
                    _agreement_ResponsibleInternal = value;
                    var newValue = value as FixupCollection<Agreement_ResponsibleInternal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_ResponsibleInternal;
                    }
                }
            }
        }
        private ICollection<Agreement_ResponsibleInternal> _agreement_ResponsibleInternal;
        
    
        [DataMember]
        public virtual RevenueDimension RevenueDimension
        {
            get { return _revenueDimension; }
            set
            {
                if (!ReferenceEquals(_revenueDimension, value))
                {
                    var previousValue = _revenueDimension;
                    _revenueDimension = value;
                    FixupRevenueDimension(previousValue);
                }
            }
        }
        private RevenueDimension _revenueDimension;
        
    
        [DataMember]
        public virtual RevenueTrend RevenueTrend
        {
            get { return _revenueTrend; }
            set
            {
                if (!ReferenceEquals(_revenueTrend, value))
                {
                    var previousValue = _revenueTrend;
                    _revenueTrend = value;
                    FixupRevenueTrend(previousValue);
                }
            }
        }
        private RevenueTrend _revenueTrend;
        
    
        [DataMember]
        public virtual ICollection<Agreement_SalesActual> Agreement_SalesActual
        {
            get
            {
                if (_agreement_SalesActual == null)
                {
                    var newCollection = new FixupCollection<Agreement_SalesActual>();
                    newCollection.CollectionChanged += FixupAgreement_SalesActual;
                    _agreement_SalesActual = newCollection;
                }
                return _agreement_SalesActual;
            }
            set
            {
                if (!ReferenceEquals(_agreement_SalesActual, value))
                {
                    var previousValue = _agreement_SalesActual as FixupCollection<Agreement_SalesActual>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_SalesActual;
                    }
                    _agreement_SalesActual = value;
                    var newValue = value as FixupCollection<Agreement_SalesActual>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_SalesActual;
                    }
                }
            }
        }
        private ICollection<Agreement_SalesActual> _agreement_SalesActual;
        
    
        [DataMember]
        public virtual ICollection<Agreement_SalesPlan> Agreement_SalesPlan
        {
            get
            {
                if (_agreement_SalesPlan == null)
                {
                    var newCollection = new FixupCollection<Agreement_SalesPlan>();
                    newCollection.CollectionChanged += FixupAgreement_SalesPlan;
                    _agreement_SalesPlan = newCollection;
                }
                return _agreement_SalesPlan;
            }
            set
            {
                if (!ReferenceEquals(_agreement_SalesPlan, value))
                {
                    var previousValue = _agreement_SalesPlan as FixupCollection<Agreement_SalesPlan>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_SalesPlan;
                    }
                    _agreement_SalesPlan = value;
                    var newValue = value as FixupCollection<Agreement_SalesPlan>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_SalesPlan;
                    }
                }
            }
        }
        private ICollection<Agreement_SalesPlan> _agreement_SalesPlan;
        
    
        [DataMember]
        public virtual Sector Sector
        {
            get { return _sector; }
            set
            {
                if (!ReferenceEquals(_sector, value))
                {
                    var previousValue = _sector;
                    _sector = value;
                    FixupSector(previousValue);
                }
            }
        }
        private Sector _sector;
        
    
        [DataMember]
        public virtual ICollection<Agreement_Todo> Agreement_Todo
        {
            get
            {
                if (_agreement_Todo == null)
                {
                    var newCollection = new FixupCollection<Agreement_Todo>();
                    newCollection.CollectionChanged += FixupAgreement_Todo;
                    _agreement_Todo = newCollection;
                }
                return _agreement_Todo;
            }
            set
            {
                if (!ReferenceEquals(_agreement_Todo, value))
                {
                    var previousValue = _agreement_Todo as FixupCollection<Agreement_Todo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement_Todo;
                    }
                    _agreement_Todo = value;
                    var newValue = value as FixupCollection<Agreement_Todo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement_Todo;
                    }
                }
            }
        }
        private ICollection<Agreement_Todo> _agreement_Todo;
        
    
        [DataMember]
        public virtual TowerDelivery TowerDelivery
        {
            get { return _towerDelivery; }
            set
            {
                if (!ReferenceEquals(_towerDelivery, value))
                {
                    var previousValue = _towerDelivery;
                    _towerDelivery = value;
                    FixupTowerDelivery(previousValue);
                }
            }
        }
        private TowerDelivery _towerDelivery;
        
    
        [DataMember]
        public virtual TowerService TowerService
        {
            get { return _towerService; }
            set
            {
                if (!ReferenceEquals(_towerService, value))
                {
                    var previousValue = _towerService;
                    _towerService = value;
                    FixupTowerService(previousValue);
                }
            }
        }
        private TowerService _towerService;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupContract(Contract previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (Contract != null)
            {
                if (!Contract.Agreement.Contains(this))
                {
                    Contract.Agreement.Add(this);
                }
                if (ContractNumber != Contract.ContractNumber)
                {
                    ContractNumber = Contract.ContractNumber;
                }
            }
            else if (!_settingFK)
            {
                ContractNumber = null;
            }
        }
    
        private void FixupAgreementStatus(AgreementStatus previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (AgreementStatus != null)
            {
                if (!AgreementStatus.Agreement.Contains(this))
                {
                    AgreementStatus.Agreement.Add(this);
                }
                if (AgreementStatus_id != AgreementStatus.ID)
                {
                    AgreementStatus_id = AgreementStatus.ID;
                }
            }
            else if (!_settingFK)
            {
                AgreementStatus_id = null;
            }
        }
    
        private void FixupOrganisation(Organisation previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (Organisation != null)
            {
                if (!Organisation.Agreement.Contains(this))
                {
                    Organisation.Agreement.Add(this);
                }
                if (Organisation_id != Organisation.ID)
                {
                    Organisation_id = Organisation.ID;
                }
            }
            else if (!_settingFK)
            {
                Organisation_id = null;
            }
        }
    
        private void FixupRevenueDimension(RevenueDimension previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (RevenueDimension != null)
            {
                if (!RevenueDimension.Agreement.Contains(this))
                {
                    RevenueDimension.Agreement.Add(this);
                }
                if (RevenueDimension_id != RevenueDimension.ID)
                {
                    RevenueDimension_id = RevenueDimension.ID;
                }
            }
            else if (!_settingFK)
            {
                RevenueDimension_id = null;
            }
        }
    
        private void FixupRevenueTrend(RevenueTrend previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (RevenueTrend != null)
            {
                if (!RevenueTrend.Agreement.Contains(this))
                {
                    RevenueTrend.Agreement.Add(this);
                }
                if (RevenueTrend_id != RevenueTrend.ID)
                {
                    RevenueTrend_id = RevenueTrend.ID;
                }
            }
            else if (!_settingFK)
            {
                RevenueTrend_id = null;
            }
        }
    
        private void FixupSector(Sector previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (Sector != null)
            {
                if (!Sector.Agreement.Contains(this))
                {
                    Sector.Agreement.Add(this);
                }
                if (Sector_id != Sector.ID)
                {
                    Sector_id = Sector.ID;
                }
            }
            else if (!_settingFK)
            {
                Sector_id = null;
            }
        }
    
        private void FixupTowerDelivery(TowerDelivery previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (TowerDelivery != null)
            {
                if (!TowerDelivery.Agreement.Contains(this))
                {
                    TowerDelivery.Agreement.Add(this);
                }
                if (TowerDelivery_id != TowerDelivery.ID)
                {
                    TowerDelivery_id = TowerDelivery.ID;
                }
            }
            else if (!_settingFK)
            {
                TowerDelivery_id = null;
            }
        }
    
        private void FixupTowerService(TowerService previousValue)
        {
            if (previousValue != null && previousValue.Agreement.Contains(this))
            {
                previousValue.Agreement.Remove(this);
            }
    
            if (TowerService != null)
            {
                if (!TowerService.Agreement.Contains(this))
                {
                    TowerService.Agreement.Add(this);
                }
                if (TowerService_id != TowerService.ID)
                {
                    TowerService_id = TowerService.ID;
                }
            }
            else if (!_settingFK)
            {
                TowerService_id = null;
            }
        }
    
        private void FixupAgreement_AccountUnit(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_AccountUnit item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_AccountUnit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_CostActual(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_CostActual item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_CostActual item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_Memo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_Memo item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_Memo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_ResponsibleExternal(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_ResponsibleExternal item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_ResponsibleExternal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_ResponsibleInternal(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_ResponsibleInternal item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_ResponsibleInternal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_SalesActual(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_SalesActual item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_SalesActual item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_SalesPlan(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_SalesPlan item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_SalesPlan item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }
    
        private void FixupAgreement_Todo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement_Todo item in e.NewItems)
                {
                    item.Agreement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement_Todo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agreement, this))
                    {
                        item.Agreement = null;
                    }
                }
            }
        }

        #endregion

    }
}

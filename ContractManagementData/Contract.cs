//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ContractManagementData
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Contract_Document))]
    [KnownType(typeof(Agreement))]
    public partial class Contract
    {
        #region Primitive Properties
        [DataMember]
        public virtual string ContractNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string ContractName
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<Contract_Document> Contract_Document
        {
            get
            {
                if (_contract_Document == null)
                {
                    var newCollection = new FixupCollection<Contract_Document>();
                    newCollection.CollectionChanged += FixupContract_Document;
                    _contract_Document = newCollection;
                }
                return _contract_Document;
            }
            set
            {
                if (!ReferenceEquals(_contract_Document, value))
                {
                    var previousValue = _contract_Document as FixupCollection<Contract_Document>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContract_Document;
                    }
                    _contract_Document = value;
                    var newValue = value as FixupCollection<Contract_Document>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContract_Document;
                    }
                }
            }
        }
        private ICollection<Contract_Document> _contract_Document;
        
    
        [DataMember]
        public virtual ICollection<Agreement> Agreement
        {
            get
            {
                if (_agreement == null)
                {
                    var newCollection = new FixupCollection<Agreement>();
                    newCollection.CollectionChanged += FixupAgreement;
                    _agreement = newCollection;
                }
                return _agreement;
            }
            set
            {
                if (!ReferenceEquals(_agreement, value))
                {
                    var previousValue = _agreement as FixupCollection<Agreement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgreement;
                    }
                    _agreement = value;
                    var newValue = value as FixupCollection<Agreement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgreement;
                    }
                }
            }
        }
        private ICollection<Agreement> _agreement;

        #endregion

        #region Association Fixup
    
        private void FixupContract_Document(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Contract_Document item in e.NewItems)
                {
                    item.Contract = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Contract_Document item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contract, this))
                    {
                        item.Contract = null;
                    }
                }
            }
        }
    
        private void FixupAgreement(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agreement item in e.NewItems)
                {
                    item.Contract = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agreement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contract, this))
                    {
                        item.Contract = null;
                    }
                }
            }
        }

        #endregion

    }
}
